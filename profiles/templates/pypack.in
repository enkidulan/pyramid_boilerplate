#!${buildout:directory}/bin/python
"""
Python package wrapper for HTML/CSS files. It takes git project by provided
URL and wrap it as python package with given name. Package name must be from
simple python packages namespace.

Usage:
  pypack PAGKAGE_SIMPLE_NAME GIT_PROJECT_URL
"""
import os
from git import Repo
import shutil

setup_py_template = '''
from setuptools import setup, find_packages


setup(name='%(package_name)s',
      version='0.0',
      packages=find_packages(),
      include_package_data=True,
      zip_safe=False,
      install_requires=[
          # -*- Extra requirements: -*-
          'pyramid',
      ],
      entry_points="""
        # -*- Entry points: -*-
        [paste.filter_app_factory]
        %(package_name)s = %(package_name)s:FrontendFilter
      """,
)
'''

init_py_template = '''
import mimetypes
import os.path
from pyramid.response import FileResponse
from pyramid.request import Request
HERE = os.path.dirname(os.path.abspath(__file__))


class FrontendFilter(object):
    def __init__(self, app, global_conf, document_root):
        self.app = app
        if ':' in document_root:
            document_root = os.path.join(HERE, document_root.split(':', 1)[1])
        self.document_root = document_root

    def __call__(self, environ, start_response):
        path = environ.get('PATH_INFO').strip('/') or 'index.html'
        filename = os.path.join(self.document_root, path)
        if os.path.isfile(filename):
            file_type, _ = mimetypes.guess_type(filename)
            response = FileResponse(
                filename,
                request=Request(environ=environ),
                content_type=file_type,
                )
            return response(environ, start_response)
        return self.app(environ, start_response)
'''


def main(package_name, project_url_to_wrap):
    # TODO: use tmpdir for creation
    base_package_path = package_name  # TODO: add proper path handling

    # creating base package container
    os.mkdir(base_package_path)
    with open(os.path.join(base_package_path, 'setup.py'), 'w') as f:
        f.write(setup_py_template % {'package_name': package_name})

    # creating python package content
    package_content_path = os.path.join(base_package_path, package_name)
    # cloning GIT_PROJECT_URL into package content folder
    Repo.clone_from(project_url_to_wrap, package_content_path)
    # cleaning up
    shutil.rmtree(os.path.join(package_content_path, '.git'))

    # creating init file with some functions
    with open(os.path.join(package_content_path, '__init__.py'), 'w') as f:
        f.write(init_py_template)


if __name__ == '__main__':
    from docopt import docopt
    arguments = docopt(__doc__)
    main(
        package_name=arguments['PAGKAGE_SIMPLE_NAME'],
        project_url_to_wrap=arguments['GIT_PROJECT_URL'])
